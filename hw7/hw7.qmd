---
title: Homework 7 - Creating a resume database
author: Solaris Serrano
date: last-modified
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

This Document includes and overview of the Hw7 and a description. As well as a Crow's Foot Diagram, Examples of data, sample queries, a list of skills, tags, and ordered descritpions, and an overall refelctions



GITHUB URL:  https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-Sola4610

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description
creating a resume database.working with a MySQL database, connecting to it using Python and the SQLAlchemy library. Loads and stores configuration parameters (database credentials) from the .env file.
Creates a SQLAlchemy database connection engine.Checks the database connection and prints any errors encountered during the connection attempt. Provides descriptions and data listings for tables in the database: People, Skills, and Roles.

## Crows-foot diagram

Entity-Relationship (ER) diagram that visually represents the structure of the database schema. 

```{mermaid}
%%| echo: false
erDiagram
    SKILLS ||--o{ PEOPLE_SKILLS : "1-M"
    PEOPLE ||--o{ PEOPLE_SKILLS : "1-M"
    PEOPLE ||--o{ PEOPLE_ROLES : "1-M"
    ROLES ||--o{ PEOPLE_ROLES : "1-M"

    SKILLS {
        int ID
        string name
        string description
        string tag
        string url
        int time_commitment
    }
    
    PEOPLE {
        int ID
        string first_name
        string last_name
        string email
        string linkedin_url
        string headshot_url
        string discord_handle
        string brief_bio
        date date_joined
    }

    PEOPLE_SKILLS {
        int ID
        int skills_id
        int people_id
        date date_acquired
    }

    ROLES {
        int ID
        string name
        int sort_priority
    }

    PEOPLE_ROLES {
        int ID
        int people_id
        int role_id
        date date_role_acquired
    }

```

## Examples of data in the database

For the people, skills, and roles tables, provide a description of each table and it's contents. Then provide a listing of the entire table.

### People table

The *people* table contains elements that describe ... 

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe ... 

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from skills;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe ... 

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from roles;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

(here a sample query)

```{python}
sql = f"""
select * from people
"""
```


(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name
```{python}
sql = f"""
SELECT first_name, last_name, email
FROM people
ORDER BY last_name
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```
### List skill names of Person 1
```{python}
sql = f"""
SELECT s.name AS skill_name
FROM peopleskills ps
JOIN skills s ON ps.skills_id = s.id
WHERE ps.people_id = 1;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names with Skill 6
```{python}
sql = f"""
SELECT DISTINCT p.first_name, p.last_name
FROM people p
JOIN peopleskills ps ON p.id = ps.people_id
WHERE ps.skills_id = 6;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```
### List people with a DEVELOPER role
```{python}
sql = f"""
SELECT  DISTINCT p.first_name, p.last_name
FROM people p
JOIN people_roles pr ON p.id = pr.people_id
JOIN roles r ON pr.role_id = r.id
WHERE r.name = 'DEVELOPER';
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and email addresses of people without skills
```{python}
sql = f"""
SELECT people.first_name, people.last_name, people.email
FROM people
LEFT JOIN peopleskills ON people.id = peopleskills.people_id
WHERE peopleskills.id IS NULL
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and tags of unused skills
```{python}
sql = f"""
SELECT skills.name, skills.tag
FROM skills
LEFT JOIN peopleskills ON skills.id = peopleskills.skills_id
WHERE peopleskills.id IS NULL
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names and skill names with the BOSS role
```{python}
sql = f"""
SELECT DISTINCT p.first_name, p.last_name, s.name AS skill_name
FROM people p
JOIN people_roles pr ON p.id = pr.people_id
JOIN roles r ON pr.role_id = r.id
LEFT JOIN peopleskills ps ON p.id = ps.people_id
LEFT JOIN skills s ON ps.skills_id = s.id
WHERE r.name = 'BOSS';
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List ids and names of unused roles
```{python}
sql = f"""
SELECT r.id, r.name
FROM roles r
LEFT JOIN people_roles pr ON r.id = pr.role_id
WHERE pr.people_id IS NULL
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

## Reflection

Overall I already had some SQL knowledge and this wasn't too hard. It was like a refresher in terms of what I was doing. I feel for the examples for some of them could use more description like ones that asked for "unused". I just got a little confused on those ones, but overall I didn't have any issues with this assignment.